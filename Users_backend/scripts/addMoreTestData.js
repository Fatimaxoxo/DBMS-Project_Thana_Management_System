// scripts/addMoreTestData.js
import { pool } from "../config/db.js";

async function addMoreTestData() {
  try {
    console.log("üîÑ ‡¶Ü‡¶∞‡ßã test data add ‡¶ï‡¶∞‡¶õ‡¶ø...\n");

    // Add more complaints with proper fields
    const complaintsData = [
      {
        user_id: 4, // ‡¶∞‡¶π‡¶ø‡¶Æ ‡¶â‡¶¶‡ßç‡¶¶‡¶ø‡¶®
        crime_type: "‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶ö‡ßÅ‡¶∞‡¶ø",
        description:
          "‡¶¨‡¶æ‡¶∏ ‡¶∏‡ßç‡¶ü‡¶™‡ßá ‡¶¶‡¶æ‡¶Å‡¶°‡¶º‡¶ø‡¶Ø‡¶º‡ßá ‡¶•‡¶æ‡¶ï‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶™‡¶ï‡ßá‡¶ü ‡¶•‡ßá‡¶ï‡ßá ‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶´‡ßã‡¶® ‡¶ö‡ßÅ‡¶∞‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§",
        incident_location: "‡¶∂‡¶æ‡¶®‡ßç‡¶§‡¶ø‡¶®‡¶ó‡¶∞ ‡¶¨‡¶æ‡¶∏ ‡¶∏‡ßç‡¶ü‡¶™",
        incident_date: "2025-09-22",
        suspect_info: "‡¶™‡ßç‡¶∞‡¶æ‡¶Ø‡¶º ‡ß®‡ß´ ‡¶¨‡¶õ‡¶∞ ‡¶¨‡¶Ø‡¶º‡¶∏‡ßÄ ‡¶è‡¶ï‡¶ú‡¶® ‡¶Ø‡ßÅ‡¶¨‡¶ï, ‡¶®‡ßÄ‡¶≤ ‡¶∞‡¶ô‡ßá‡¶∞ ‡¶∂‡¶æ‡¶∞‡ßç‡¶ü ‡¶™‡¶∞‡¶æ ‡¶õ‡¶ø‡¶≤‡•§",
        thana_id: 1,
      },
      {
        user_id: 5, // ‡¶∏‡¶æ‡¶≤‡¶Æ‡¶æ ‡¶Ü‡¶ï‡ßç‡¶§‡¶æ‡¶∞
        crime_type: "‡¶¨‡¶æ‡¶°‡¶º‡¶ø‡¶§‡ßá ‡¶ö‡ßÅ‡¶∞‡¶ø",
        description:
          "‡¶¨‡¶æ‡¶°‡¶º‡¶ø ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡ßá‡¶∞ ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶¶‡¶∞‡¶ú‡¶æ ‡¶ñ‡ßã‡¶≤‡¶æ ‡¶∞‡ßá‡¶ñ‡ßá ‡¶ó‡ßá‡¶õ‡¶ø‡•§ ‡¶´‡¶ø‡¶∞‡ßá ‡¶è‡¶∏‡ßá ‡¶¶‡ßá‡¶ñ‡¶ø ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶ì ‡¶ó‡¶π‡¶®‡¶æ ‡¶ö‡ßÅ‡¶∞‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§",
        incident_location: "‡¶Æ‡¶ø‡¶∞‡¶™‡ßÅ‡¶∞ ‡ßß, ‡¶¨‡¶æ‡¶∏‡¶æ ‡¶®‡¶Ç ‡ß®‡ß´/‡¶è",
        incident_date: "2025-09-23",
        suspect_info: "‡¶™‡¶æ‡¶∂‡ßá‡¶∞ ‡¶¨‡¶æ‡¶°‡¶º‡¶ø‡¶∞ ‡¶ï‡¶æ‡¶ú‡ßá‡¶∞ ‡¶≤‡ßã‡¶ï ‡¶∏‡¶®‡ßç‡¶¶‡ßá‡¶π‡¶ú‡¶®‡¶ï ‡¶Ü‡¶ö‡¶∞‡¶£ ‡¶ï‡¶∞‡¶õ‡¶ø‡¶≤‡•§",
        thana_id: 1,
      },
      {
        user_id: 10, // ‡¶∞‡¶æ‡¶∂‡¶ø‡¶¶‡¶æ ‡¶¨‡ßá‡¶ó‡¶Æ
        crime_type: "‡¶á‡¶≠‡¶ü‡¶ø‡¶ú‡¶ø‡¶Ç",
        description:
          "‡¶Ö‡¶´‡¶ø‡¶∏ ‡¶•‡ßá‡¶ï‡ßá ‡¶´‡ßá‡¶∞‡¶æ‡¶∞ ‡¶™‡¶•‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¶‡¶ø‡¶® ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶Ø‡ßÅ‡¶¨‡¶ï ‡¶â‡¶§‡ßç‡¶Ø‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡ßá‡•§ ‡¶Ö‡¶∂‡ßç‡¶≤‡ßÄ‡¶≤ ‡¶Æ‡¶®‡ßç‡¶§‡¶¨‡ßç‡¶Ø ‡¶ï‡¶∞‡ßá‡•§",
        incident_location: "‡¶ó‡ßÅ‡¶≤‡¶∂‡¶æ‡¶® ‡ß® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶∏‡¶°‡¶º‡¶ï",
        incident_date: "2025-09-21",
        suspect_info:
          "‡¶∏‡ßç‡¶•‡¶æ‡¶®‡ßÄ‡¶Ø‡¶º ‡ß©-‡ß™ ‡¶ú‡¶® ‡¶Ø‡ßÅ‡¶¨‡¶ï, ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ ‡¶¨‡¶ø‡¶ï‡ßá‡¶≤‡ßá ‡¶ì‡¶á ‡¶è‡¶≤‡¶æ‡¶ï‡¶æ‡¶Ø‡¶º ‡¶¶‡ßá‡¶ñ‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡•§",
        thana_id: 1,
      },
    ];

    // Get next complaint_id
    const [maxComplaintId] = await pool.query(
      "SELECT MAX(complaint_id) as max_id FROM Makes_complaint"
    );
    let nextComplaintId = (maxComplaintId[0].max_id || 0) + 1;

    for (const complaint of complaintsData) {
      const [result] = await pool.query(
        `
        INSERT INTO Makes_complaint 
        (complaint_id, user_id, crime_type, description, location, incident_date, suspect_info, thana_id, status, date, created_at)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, 'pending', CURDATE(), NOW())
      `,
        [
          nextComplaintId,
          complaint.user_id,
          complaint.crime_type,
          complaint.description,
          complaint.incident_location,
          complaint.incident_date,
          complaint.suspect_info,
          complaint.thana_id,
        ]
      );

      // Auto create case for each complaint
      const caseNumber = `CASE-${Date.now()}-${result.insertId}`;
      const priority = complaint.crime_type.includes("‡¶ö‡ßÅ‡¶∞‡¶ø")
        ? "medium"
        : complaint.crime_type.includes("‡¶á‡¶≠‡¶ü‡¶ø‡¶ú‡¶ø‡¶Ç")
        ? "high"
        : "low";

      const [caseResult] = await pool.query(
        `
        INSERT INTO Case_filing 
        (case_number, summary, start_date, complaint_id, user_id, thana_id, priority, status, progress_percentage, created_at)
        VALUES (?, ?, CURDATE(), ?, ?, ?, ?, 'pending', 0, NOW())
      `,
        [
          caseNumber,
          `${complaint.crime_type} ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶§ ‡¶Æ‡¶æ‡¶Æ‡¶≤‡¶æ - ${complaint.incident_location}`,
          nextComplaintId,
          complaint.user_id,
          complaint.thana_id,
          priority,
        ]
      );

      console.log(
        `‚úÖ Complaint & Case created: ${complaint.crime_type} - ${caseNumber}`
      );
      nextComplaintId++; // Increment for next complaint

      // Create notification for thana officers
      const [thanaOfficers] = await pool.query(
        `
        SELECT user_id FROM users WHERE user_type = 'thana-officer' AND thana_id = ?
      `,
        [complaint.thana_id]
      );

      for (const officer of thanaOfficers) {
        await pool.query(
          `
          INSERT INTO notifications 
          (user_id, title, message, type, case_id, complaint_id, created_at)
          VALUES (?, ?, ?, ?, ?, ?, NOW())
        `,
          [
            officer.user_id,
            "‡¶®‡¶§‡ßÅ‡¶® ‡¶Ö‡¶≠‡¶ø‡¶Ø‡ßã‡¶ó ‡¶ì ‡¶Æ‡¶æ‡¶Æ‡¶≤‡¶æ",
            `‡¶®‡¶§‡ßÅ‡¶® ${complaint.crime_type} ‡¶Ö‡¶≠‡¶ø‡¶Ø‡ßã‡¶ó ‡¶è‡¶¨‡¶Ç ‡¶Æ‡¶æ‡¶Æ‡¶≤‡¶æ ${caseNumber} ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶è‡¶≤‡¶æ‡¶ï‡¶æ: ${complaint.incident_location}`,
            "complaint_received",
            caseResult.insertId,
            nextComplaintId,
          ]
        );
      }

      // Notify user about complaint received
      await pool.query(
        `
        INSERT INTO notifications 
        (user_id, title, message, type, case_id, complaint_id, created_at)
        VALUES (?, ?, ?, ?, ?, ?, NOW())
      `,
        [
          complaint.user_id,
          "‡¶Ö‡¶≠‡¶ø‡¶Ø‡ßã‡¶ó ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶∏‡¶´‡¶≤",
          `‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ${complaint.crime_type} ‡¶Ö‡¶≠‡¶ø‡¶Ø‡ßã‡¶ó ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Æ‡¶æ‡¶Æ‡¶≤‡¶æ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞: ${caseNumber}`,
          "complaint_received",
          caseResult.insertId,
          result.insertId,
        ]
      );
    }

    // Show summary
    const [totalComplaints] = await pool.query(
      "SELECT COUNT(*) as count FROM Makes_complaint"
    );
    const [totalCases] = await pool.query(
      "SELECT COUNT(*) as count FROM Case_filing"
    );
    const [totalNotifications] = await pool.query(
      "SELECT COUNT(*) as count FROM notifications"
    );

    console.log(`\nüìä Database Summary:`);
    console.log(`üìù Total Complaints: ${totalComplaints[0].count}`);
    console.log(`üìÅ Total Cases: ${totalCases[0].count}`);
    console.log(`üîî Total Notifications: ${totalNotifications[0].count}`);

    console.log("\nüéâ Test data ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!");
  } catch (error) {
    console.error("‚ùå Error:", error);
  } finally {
    process.exit(0);
  }
}

addMoreTestData();
