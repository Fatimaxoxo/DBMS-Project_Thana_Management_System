// scripts/addTestData.js
import { pool } from "../config/db.js";

async function addTestData() {
  try {
    console.log("Adding test data to database...");

    // Insert more sample users
    await pool.query(`
      INSERT IGNORE INTO users (name, phone, password, user_type, thana_id) VALUES
      ('рж╕рж╛ржХрж┐ржм ржЖрж╣ржорзЗржж', '01788888888', '123456', 'user', NULL),
      ('рж░рж╣рж┐ржорж╛ ржЦрж╛рждрзБржи', '01799999999', '123456', 'user', NULL),
      ('ржХрж░рж┐ржо ржЙржжрзНржжрж┐ржи', '01700000000', '123456', 'user', NULL),
      ('ржирж╛рж╕рж┐рж░ рж╣рзЛрж╕рзЗржи', '01811111111', '123456', 'thana-officer', 1),
      ('рж╕рзЛрж╣рзЗрж▓ рж░рж╛ржирж╛', '01822222222', '123456', 'warrant-officer', 1),
      ('ржЖржорж┐ржирж╛ ржмрзЗржЧржо', '01833333333', '123456', 'user', NULL)
    `);
    console.log("тЬЕ Additional users inserted");

    // Get user IDs for complaints
    const [users] = await pool.query(`
      SELECT user_id, name, phone FROM users WHERE user_type = 'user' LIMIT 6
    `);

    if (users.length > 0) {
      // Insert sample complaints
      const complaints = [
        {
          user_id: users[0].user_id,
          crime_type: "ржЪрзБрж░рж┐",
          description:
            "рж░рж╛рждрзЗ ржШрж░рзЗ ржЪрзЛрж░ ржврзБржХрзЗ ржЯрж╛ржХрж╛-ржкржпрж╝рж╕рж╛ ржУ ржЧрж╣ржирж╛ ржЪрзБрж░рж┐ ржХрж░рзЗржЫрзЗред ржЖржирзБржорж╛ржирж┐ржХ ржХрзНрж╖рждрж┐ рзлрзж,рзжрзжрзж ржЯрж╛ржХрж╛ред",
          incident_date: "2025-09-20",
          incident_location: "ржорж┐рж░ржкрзБрж░-рззрзж, ржврж╛ржХрж╛",
          suspect_info: "ржкрж╛ржбрж╝рж╛рж░ ржХржпрж╝рзЗржХржЬржи рж╕ржирзНржжрзЗрж╣ржнрж╛ржЬржи ржмрзНржпржХрзНрждрж┐ ржЖржЫрзЗ",
        },
        {
          user_id: users[1]?.user_id || users[0].user_id,
          crime_type: "ржбрж╛ржХрж╛рждрж┐",
          description:
            "ржжрж┐ржирзЗрж░ ржмрзЗрж▓рж╛ ржжрзЛржХрж╛ржирзЗ ржбрж╛ржХрж╛рждрж┐ рж╣ржпрж╝рзЗржЫрзЗред ржбрж╛ржХрж╛рждрж░рж╛ ржЕрж╕рзНрждрзНрж░ ржжрзЗржЦрж┐ржпрж╝рзЗ ржЯрж╛ржХрж╛ ржирж┐ржпрж╝рзЗ ржЧрзЗржЫрзЗред",
          incident_date: "2025-09-21",
          incident_location: "ржзрж╛ржиржоржирзНржбрж┐, ржврж╛ржХрж╛",
          suspect_info: "рзй-рзк ржЬржи ржпрзБржмржХ, ржорзБржЦ ржврж╛ржХрж╛ ржЫрж┐рж▓",
        },
        {
          user_id: users[2]?.user_id || users[0].user_id,
          crime_type: "ржорж╛рж░рж╛ржорж╛рж░рж┐",
          description:
            "ржкрж╛ржбрж╝рж╛ржпрж╝ ржжрзБржЗ ржкржХрзНрж╖рзЗрж░ ржоржзрзНржпрзЗ ржорж╛рж░рж╛ржорж╛рж░рж┐ рж╣ржпрж╝рзЗржЫрзЗред ржПржХржЬржи ржЖрж╣ржд рж╣ржпрж╝рзЗржЫрзЗред",
          incident_date: "2025-09-22",
          incident_location: "ржЙрждрзНрждрж░рж╛, ржврж╛ржХрж╛",
          suspect_info: "ржкрзНрж░рждрж┐ржмрзЗрж╢рзА рж░рж╣рж┐ржо ржУ ржХрж░рж┐ржорзЗрж░ ржоржзрзНржпрзЗ ржмрж┐рж░рзЛржз",
        },
        {
          user_id: users[3]?.user_id || users[0].user_id,
          crime_type: "ржорж╛ржжржХ",
          description: "ржПрж▓рж╛ржХрж╛ржпрж╝ ржорж╛ржжржХ ржмрж┐ржХрзНрж░рж┐ рж╣ржЪрзНржЫрзЗред ржпрзБржмржХрж░рж╛ ржирж╖рзНржЯ рж╣ржЪрзНржЫрзЗред",
          incident_date: "2025-09-23",
          incident_location: "ржЧрзБрж▓рж╢рж╛ржи, ржврж╛ржХрж╛",
          suspect_info: "рж╕рзНржерж╛ржирзАржпрж╝ ржХржпрж╝рзЗржХржЬржи ржорж╛ржжржХ ржмрж┐ржХрзНрж░рзЗрждрж╛",
        },
        {
          user_id: users[4]?.user_id || users[0].user_id,
          crime_type: "ржпрзМрждрзБржХ",
          description: "ржмрж┐ржпрж╝рзЗрж░ ржкрж░ ржпрзМрждрзБржХрзЗрж░ ржЬржирзНржп ржирж┐рж░рзНржпрж╛рждржи ржХрж░рж╛ рж╣ржЪрзНржЫрзЗред",
          incident_date: "2025-09-19",
          incident_location: "рж╕рж╛ржнрж╛рж░, ржврж╛ржХрж╛",
          suspect_info: "рж╕рзНржмрж╛ржорзА ржУ рж╢рзНржмрж╢рзБрж░ржмрж╛ржбрж╝рж┐рж░ рж▓рзЛржХржЬржи",
        },
      ];

      for (const complaint of complaints) {
        try {
          await pool.query(
            `
            INSERT INTO Makes_complaint (
              user_id, crime_type, description, incident_date, location, suspect_info, status, created_at
            ) VALUES (?, ?, ?, ?, ?, ?, 'pending', NOW())
          `,
            [
              complaint.user_id,
              complaint.crime_type,
              complaint.description,
              complaint.incident_date,
              complaint.incident_location,
              complaint.suspect_info,
            ]
          );
        } catch (error) {
          // If new columns don't exist, try with basic columns
          await pool.query(
            `
            INSERT INTO Makes_complaint (description, status) VALUES (?, 'pending')
          `,
            [complaint.description]
          );
        }
      }
      console.log("тЬЕ Sample complaints inserted");

      // Get complaint IDs for cases
      const [complaints_result] = await pool.query(`
        SELECT complaint_id FROM Makes_complaint LIMIT 3
      `);

      if (complaints_result.length > 0) {
        // Insert sample cases
        const cases = [
          {
            complaint_id: complaints_result[0].complaint_id,
            case_number: "CASE-2025-001",
            status: "pending",
            priority: "high",
          },
          {
            complaint_id:
              complaints_result[1]?.complaint_id ||
              complaints_result[0].complaint_id,
            case_number: "CASE-2025-002",
            status: "in_progress",
            priority: "medium",
          },
          {
            complaint_id:
              complaints_result[2]?.complaint_id ||
              complaints_result[0].complaint_id,
            case_number: "CASE-2025-003",
            status: "completed",
            priority: "low",
          },
        ];

        for (const case_data of cases) {
          try {
            await pool.query(
              `
              INSERT INTO Case_filing (
                complaint_id, case_number, status, priority, progress_percentage, created_at
              ) VALUES (?, ?, ?, ?, ?, NOW())
            `,
              [
                case_data.complaint_id,
                case_data.case_number,
                case_data.status,
                case_data.priority,
                case_data.status === "completed"
                  ? 100
                  : case_data.status === "in_progress"
                  ? 65
                  : 0,
              ]
            );
          } catch (error) {
            // If new columns don't exist, try with basic columns
            await pool.query(
              `
              INSERT INTO Case_filing (complaint_id, status) VALUES (?, ?)
            `,
              [case_data.complaint_id, case_data.status]
            );
          }
        }
        console.log("тЬЕ Sample cases inserted");
      }

      // Insert sample notifications
      const notifications = [
        {
          user_id: users[0].user_id,
          title: "ржЕржнрж┐ржпрзЛржЧ ржЧрзГрж╣рзАржд",
          message: "ржЖржкржирж╛рж░ ржЪрзБрж░рж┐рж░ ржЕржнрж┐ржпрзЛржЧржЯрж┐ ржЧрзГрж╣рзАржд рж╣ржпрж╝рзЗржЫрзЗ ржПржмржВ рждржжржирзНржд рж╢рзБрж░рзБ рж╣ржпрж╝рзЗржЫрзЗред",
          type: "case",
        },
        {
          user_id: users[1]?.user_id || users[0].user_id,
          title: "ржорж╛ржорж▓рж╛ ржЖржкржбрзЗржЯ",
          message: "ржЖржкржирж╛рж░ ржбрж╛ржХрж╛рждрж┐рж░ ржорж╛ржорж▓рж╛ржпрж╝ ржЕржЧрзНрж░ржЧрждрж┐ рж╣ржпрж╝рзЗржЫрзЗред рждржжржирзНржд ржЪрж▓ржорж╛ржиред",
          type: "progress",
        },
        {
          user_id: users[2]?.user_id || users[0].user_id,
          title: "ржорж╛ржорж▓рж╛ рж╕ржорж╛ржзрж╛ржи",
          message: "ржЖржкржирж╛рж░ ржорж╛рж░рж╛ржорж╛рж░рж┐рж░ ржорж╛ржорж▓рж╛ржЯрж┐ рж╕ржорж╛ржзрж╛ржи рж╣ржпрж╝рзЗржЫрзЗред",
          type: "case",
        },
      ];

      for (const notification of notifications) {
        try {
          await pool.query(
            `
            INSERT INTO notifications (user_id, title, message, type, created_at) 
            VALUES (?, ?, ?, ?, NOW())
          `,
            [
              notification.user_id,
              notification.title,
              notification.message,
              notification.type,
            ]
          );
        } catch (error) {
          console.log("Error inserting notification:", error.message);
        }
      }
      console.log("тЬЕ Sample notifications inserted");
    }

    // Display current data summary
    console.log("\nЁЯУК ржбрж╛ржЯрж╛ржмрзЗрж╕ рж╕рж╛рж░рж╛ржВрж╢:");

    const [userCount] = await pool.query("SELECT COUNT(*) as count FROM users");
    console.log(`ЁЯСе ржорзЛржЯ ржЗржЙржЬрж╛рж░: ${userCount[0].count}`);

    const [complaintCount] = await pool.query(
      "SELECT COUNT(*) as count FROM Makes_complaint"
    );
    console.log(`ЁЯУЭ ржорзЛржЯ ржЕржнрж┐ржпрзЛржЧ: ${complaintCount[0].count}`);

    const [caseCount] = await pool.query(
      "SELECT COUNT(*) as count FROM Case_filing"
    );
    console.log(`ЁЯУБ ржорзЛржЯ ржорж╛ржорж▓рж╛: ${caseCount[0].count}`);

    try {
      const [notificationCount] = await pool.query(
        "SELECT COUNT(*) as count FROM notifications"
      );
      console.log(`ЁЯФФ ржорзЛржЯ ржмрж┐ржЬрзНржЮржкрзНрждрж┐: ${notificationCount[0].count}`);
    } catch (error) {
      console.log("ЁЯФФ ржмрж┐ржЬрзНржЮржкрзНрждрж┐ ржЯрзЗржмрж┐рж▓ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐");
    }

    console.log("\nЁЯФС ржЯрзЗрж╕рзНржЯ ржПржХрж╛ржЙржирзНржЯ:");
    console.log("тФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ");
    console.log("ЁЯУ▒ ржирж╛ржорзНржмрж╛рж░: 01766666666, ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб: 123456 (рж╕рж╛ржзрж╛рж░ржг ржЗржЙржЬрж╛рж░)");
    console.log("ЁЯУ▒ ржирж╛ржорзНржмрж╛рж░: 01722222222, ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб: 123456 (ржерж╛ржирж╛ ржЕржлрж┐рж╕рж╛рж░)");
    console.log(
      "ЁЯУ▒ ржирж╛ржорзНржмрж╛рж░: 01733333333, ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб: 123456 (ржУржпрж╝рж╛рж░рзЗржирзНржЯ ржЕржлрж┐рж╕рж╛рж░)"
    );
    console.log(
      "ЁЯУ▒ ржирж╛ржорзНржмрж╛рж░: 01788888888, ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб: 123456 (рж╕рж╛ржХрж┐ржм ржЖрж╣ржорзЗржж - ржЗржЙржЬрж╛рж░)"
    );
  } catch (error) {
    console.error("тЭМ ржЯрзЗрж╕рзНржЯ ржбрж╛ржЯрж╛ ржпрзЛржЧ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛:", error);
  } finally {
    process.exit(0);
  }
}

addTestData();
